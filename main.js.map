{"version":3,"file":"main.js","sources":["../src/nBodyVisualizer.js","../src/nBodySimulator.js","../src/main.js"],"sourcesContent":["/**\n * This is a toolkit of visualizers for our simulation.\n */\n\n/**\n * Base class that console.log()s the simulation state.\n */\nexport class nBodyVisualizer {\n  constructor(htmlElement) {\n    this.htmlElement = htmlElement\n    this.resize()\n\n    this.scaleSize = 25 // divided into bodies drawSize.  drawSize is log10(mass)\n  }\n\n  resize() {}\n\n  paint(bodies) {\n    console.log(JSON.stringify(bodies, null, 2))\n  }\n}\n\n/**\n * This is the WebVR visualizer.  It's responsible for painting and setting up the entire scene.\n */\nexport class nBodyVisWebVR extends nBodyVisualizer {\n  constructor(htmlElement, sim) {\n    // HTML Element is a-collection#a-bodies.\n    super(htmlElement)\n    // We add these to the global namespace because this isn't the core problem we are trying to solve.\n    window.sim = sim\n    this.nextId = 0\n  }\n\n  resize() {}\n\n  paint(bodies) {\n    let i\n\n    // Create lookup table:  lookup[body.aframeId] = body\n    const lookup = bodies.reduce( (total, body) => {\n      // If new body, give it an aframeId\n      if (!body.aframeId) body.aframeId = `a-sim-body-${body.name}-${this.nextId++}`\n      total[body.aframeId] = body\n      return total\n    }, {})\n\n    // Loop through existing a-sim-bodies and remove any that are not in lookup - dropped debris\n    const aSimBodies = document.querySelectorAll(\".a-sim-body\")\n    for (i = 0; i < aSimBodies.length; i++) {\n      if (!lookup[aSimBodies[i].id]) {  // if we don't find the scene's a-body in the lookup table of Body()s, \n        aSimBodies[i].parentNode.removeChild(aSimBodies[i]); // remove the a-body from the scene\n      } \n    }\n\n    // loop through sim bodies and upsert\n    let aBody\n    bodies.forEach( body => {\n      // Find the html element for this aframeId\n      aBody = document.getElementById(body.aframeId)\n      // If html element not found, make one.\n      if (!aBody) {\n        this.htmlElement.innerHTML += `\n<a-sphere \n  id=\"${body.aframeId}\"\n  class=\"a-sim-body\"\n  dynamic-body \n  ${ (body.name === \"star\") ? \"debris-listener event-set__enter='_event: mouseenter; color: green' event-set__leave='_event: mouseleave; color: yellow'\" : \"\"} \n  position=\"${body.x} ${body.y} ${body.z}\" \n  radius=\"${body.drawSize/this.scaleSize}\" \n  color=\"${body.color}\">\n</a-sphere>`\n        aBody = document.getElementById(body.aframeId)\n      }\n      // reposition\n      aBody.object3D.position.set(body.x, body.y, body.z)\n    })\n\t}\n}\n\n// Component to change to a sequential color on click.\nAFRAME.registerComponent('debris-listener', {\n  init: function () {\n    const self = this\n    // Helper function\n    function rando(scale) {  return (Math.random()-.5) * scale }\n    this.el.addEventListener('click', function (evt) {\n      //console.log('I was clicked at: ', evt.detail.intersection.point);\n      for (let x=0; x<10; x++) {\n        window.sim.addBodyArgs(\"debris\", \"white\", rando(10), rando(10), rando(10), 1, rando(.1), rando(.1), rando(.1))\n      }\n    })\n  }\n})\n\n\n\n// Unused reference implementations below\n\n/**\n * Pretty print simulation to an htmlElement's innerHTML\n */\nexport class nBodyVisPrettyPrint extends nBodyVisualizer {\n  constructor(htmlElement) {\n    super(htmlElement)\n  }\n\n  resize() {}\n\n  paint(bodies) {\n    let text = ''\n    bodies.forEach( body => {\n      text += `<br>${body.name} {<br>  x:${body.x.toPrecision(2)}<br>  y:${body.y.toPrecision(2)}<br>  z:${body.z.toPrecision(2)}<br>  mass:${body.mass.toPrecision(2)})<br>}<br>${body.drawSize}`\n    })\n    if (this.htmlElement) this.htmlElement.innerHTML = text\n  }\n}\n\n/**\n * Draw simulation state to Canvas\n */\nexport class nBodyVisCanvas extends nBodyVisualizer {\n  constructor(htmlElement) {\n    super(htmlElement)\n\n    // Listen for resize to scale our simulation\n    window.onresize = this.resize.bind(this)\n  }\n\n  // If the window is resized, we need to resize our visualization\n  resize() {\n    if (!this.htmlElement) return\n    this.sizeX = this.htmlElement.offsetWidth\n    this.sizeY = this.htmlElement.offsetHeight\n    this.htmlElement.width = this.sizeX\n    this.htmlElement.height = this.sizeY\n    this.vis = this.htmlElement.getContext('2d')\n  }\n\n  // Paint on the canvas\n  paint(bodies) {\n    if (!this.htmlElement) return\n    // We need to convert our 3d float universe to a 2d pixel visualization\n    // calculate shift and scale\n    const bounds = this.bounds(bodies)\n    const shiftX = bounds.xMin\n    const shiftY = bounds.yMin\n    const twoPie = 2 * Math.PI\n    \n    let scaleX = this.sizeX / (bounds.xMax - bounds.xMin)\n    let scaleY = this.sizeY / (bounds.yMax - bounds.yMin)\n    if (isNaN(scaleX) || !isFinite(scaleX) || scaleX < 15) scaleX = 15\n    if (isNaN(scaleY) || !isFinite(scaleY) || scaleY < 15) scaleY = 15\n\n    // Begin Draw\n    this.vis.clearRect(0, 0, this.vis.canvas.width, this.vis.canvas.height)\n    bodies.forEach((body, index) => {\n      // Center\n      const drawX = (body.x - shiftX) * scaleX\n      const drawY = (body.y - shiftY) * scaleY\n      // Draw on canvas\n      this.vis.beginPath();\n      this.vis.arc(drawX, drawY, body.drawSize, 0, twoPie, false);\n      this.vis.fillStyle = body.color || \"#aaa\"\n      this.vis.fill();\n    });\n  }\n\n  // Because we draw the 3d space in 2d from the top, we ignore z\n  bounds(bodies) {\n    const ret = { xMin: 0, xMax: 0, yMin: 0, yMax: 0, zMin: 0, zMax: 0 }\n    bodies.forEach(body => {\n      if (ret.xMin > body.x) ret.xMin = body.x\n      if (ret.xMax < body.x) ret.xMax = body.x\n      if (ret.yMin > body.y) ret.yMin = body.y\n      if (ret.yMax < body.y) ret.yMax = body.y\n      if (ret.zMin > body.z) ret.zMin = body.z\n      if (ret.zMax < body.z) ret.zMax = body.z\n    })\n    return ret\n  }\n}\n","/**\n * This creates an n-body simulation in 3d space using mass, distance, and gravity.\n * \n * Example usage:\n * \n * const sim = new nBodySimulator()\n * \n * sim.addVisualization(new nBodyVisPrettyPrint())\n * sim.addVisualization(new nBodyVisCanvas())\n * \n * // Set Z coords to 1 for best visualiztion in overhead 2d Canvas\n * sim.addBody(new Body(1, 1, 1, 100))\n * \n * // Start simulation with empty universe, then add bodies.  \n * sim.start()\n * sim.addBody(new Body(-1, -1, 1, 100))\n * sim.addBody(new Body(2, -2, 1, 100))\n */\n\n/**\n * Body doesn't do much and resists change.  For our purposes, negative mass is fun.\n * \n * If pX or pY are unspecified, we give the body random initial momentum \n * so the spinny doesn't devolve to weird oscilating linear orbit\n \n * No collisions or splody are implemented.\n */\nexport class Body {\n  constructor(name, color, x, y, z, mass, vX, vY, vZ) {\n    this.name = name\n    this.color = color\n    this.x = x\n    this.y = y\n    this.z = z\n    this.mass = mass\n    \n    this.vX = vX || 0\n    this.vY = vY || 0\n    this.vZ = vZ || 0\n\n    this.forceX = 0\n    this.forceY = 0\n    this.forceZ = 0\n\n    this.drawSize = Math.min(   Math.max( Math.log10(mass), 1),   10)\n  }\n}\n\n\n/**\n * Our n-body system simulator\n */\nexport class nBodySimulator {\n\n  constructor() {\n    this.setupWebWorker()\n\n    // 1000 ms/s / 33 ms/frame = 30 frame/sec.  FIXME this could be replaced with requestAnimationFrame()\n    this.simulationSpeed = 33\n\n    // Source of truth\n    this.objBodies = []\n    \n    // used to index arrBodies\n    this.bodySize = 4   // x,y,z,mass\n\n    // used to index arrForces\n    this.forceSize = 3  // x,y,z\n\n    // Debris bounds.  see trimDebris().\n    this.debrisBounds = 12\n\n    // Has the worker been setup?\n    this.workerReady = false\n    // Is the worker calculating\n    this.workerCalculating = false\n\n    // Array of our visualizations\n    this.visualizations = []\n  }\n\n  /**\n   * Is the simulation ready to calculate\n   */\n  ready() {\n    return this.workerReady && !this.workerCalculating\n  }\n\n  /**\n   * Add a body to the simulation.\n   */\n  addBody(body) {\n    this.objBodies.push(body)\n  }\n  addBodyArgs(name, color, x, y, z, mass, vX, vY, vZ) {\n    this.addBody(new Body(name, color, x, y, z, mass, vX, vY, vZ))\n  }\n\n\n  /**\n   * Start the simulation loop\n   */\n  start() {\n    // This is the simulation loop.  step() calls visualize()\n    const step = this.step.bind(this)\n    setInterval(step, this.simulationSpeed)\n  }\n\n  /**\n   * This is the simulation loop.\n   */\n  async step() {\n    // Skip calculation if worker not ready.  We scheduled this to run every 33ms (30fps), so expect it to skip.\n    if (this.ready()) {\n      await this.calculateForces()\n    } else {\n      console.log(`Skipping sim calcuation.  Worker is busy:${this.workerCalculating}`)\n    }\n\n    // Remove any \"debris\" that has traveled out of bounds - this is for the button\n    this.trimDebris()\n\n    // Now Update forces.  Reuse old forces if worker is already busy calculating.\n    this.applyForces()\n\n    // Now Visualize\n    this.visualize()\n  }\n\n  /** \n   * Use our web worker to calculate the forces to apply on our bodies.\n   */\n  calculateForces() {\n    this.workerCalculating = true\n    this.arrBodies = []\n\n    // Copy data to array\n    this.objBodies.forEach((body, index) => {\n      const b = index * this.bodySize\n      this.arrBodies[b] = body.x\n      this.arrBodies[b + 1] = body.y\n      this.arrBodies[b + 2] = body.z\n      this.arrBodies[b + 3] = body.mass\n    })\n\n    // return promise that worker.onmessage will fulfill\n    const ret = new Promise((resolve, reject) => {\n      this.forcesResolve = resolve\n      this.forcesReject = reject\n    })\n    \n    // postMessage() to worker to start calculation\n    // Execution continues in workerWasm.js worker.onmessage()\n    this.worker.postMessage({ \n      purpose: 'nBodyForces',\n      arrBodies: this.arrBodies,\n    })\n\n    // Return promise for completion\n    // Promise is resolve()d in this.worker.onmessage() below.\n    // Once resolved, execution continees in step() above - await this.calculateForces()\n    return ret\n  }\n\n  /**\n   * Trim debris.  We let the player/user throw random bits into the universe for fun.\n   * But fun means watching it fly off, not the vis camera fly around.\n   * So we remove stuff that's gotten out of bounds\n   */\n  trimDebris() {\n    this.objBodies = this.objBodies.filter( body => {\n      if (body.name !==\"debris\") return true\n      if (isNaN(body.x) || isNaN(body.y) || isNaN(body.z)) return false\n      if (body.x < -this.debrisBounds || body.x > this.debrisBounds) return false\n      if (body.y < -this.debrisBounds || body.y > this.debrisBounds) return false\n      if (body.z < -this.debrisBounds || body.z > this.debrisBounds) return false\n      return true\n    })\n  }\n\n  /**\n   * Apply those forces.  Yes, this could be moved out of the UI thread,\n   * but passing objects across Wasm boundaries is dumb-hard - the kind of hard that is neither fun nor profitable.\n   * \n   * Physics:\n   * \n   * V = d/t             Velocity = distance / time\n   * P = mV              Momentum = mass * Velocity\n   * F = ma              Force = mass * acceleration\n   * \n   * Given the positions and mass of our bodies, we calculated the Grav forces applied in arrForces.\n   * \n   * Now, we want to push the bodies around using the forces.\n   * \n   * This is me trying to remember how to do high school physics.\n   * \n   * Given our positions and forces, \n   * \n   * F = ma.            Known F (wasm) and m (body)\n   * a = F/m.           Known a\n   * a = dV / t.        Known t (1/tick) - we will apply previous forces, so t always = 1\n   * F/m = dV / t\n   * dV = Ft/m\n   * V2 = V1 + dV       Known dV, V1\n   * x2 = x1 + V2 * t   Known x1, V2, t\n   * \n   * x2 = x1 + (V1 + (F/m))\n   * \n   * body.vX = body.vX + body.forceX / body.mass\n   * body.x = body.x + body.vX\n   */\n  applyForces() {\n    this.objBodies.forEach( (body, i) => {\n\n      if (body.mass === 0 || !this.arrForces) return // 0 mass bodies are used to position the camera min viewin the canvas visualizer.\n\n      // Capture forces\n      body.forceX = this.arrForces[i * this.forceSize + 0]\n      body.forceY = this.arrForces[i * this.forceSize + 1]\n      body.forceZ = this.arrForces[i * this.forceSize + 2]\n\n      // Convert to velocity.  We could remove mass in nBodyForces.ts and just send velocities, but I'm moving this project to the done pile.\n      body.vX = body.vX + body.forceX / body.mass\n      body.vY = body.vY + body.forceY / body.mass  \n      body.vZ = body.vZ + body.forceZ / body.mass  \n\n      // Update position from velocity\n      body.x = body.x + body.vX\n      body.y = body.y + body.vY\n      body.z = body.z + body.vZ\n    })\n  }\n\n  /**\n   * Loop through our visualizers and paint()\n   */\n  visualize() {\n    this.visualizations.forEach(vis => {\n      vis.paint(this.objBodies)\n    })\n  }\n\n  /**\n   * Add a visualizer to our list\n   */\n  addVisualization(vis) {\n    this.visualizations.push(vis)\n  }\n\n  /**\n   * Setup our web worker - buckle up, let's get weird.\n   */\n  setupWebWorker() {\n\n    // Create a Web Worker (separate thread) that we'll pass the WebAssembly module to.         \n    this.worker = new Worker(\"workerWasm.js\");\n\n    // Console errors from workerWasm.js\n    this.worker.onerror = function (evt) {\n      console.log(`Error from Web Worker: ${evt.message}`);\n    }\n\n    // Listen for messages from workerWasm.js postMessage()\n    const self = this\n    this.worker.onmessage = function (evt) {\n      if (evt && evt.data) {\n        \n        // Messages are dispatched by purpose\n        const msg = evt.data\n        switch (msg.purpose) {\n\n          // worker has loaded the wasm module we compiled and sent.  Let the magic begin!\n          // See postmessage at the bottom of this function.\n\n          case 'wasmReady': \n            self.workerReady = true\n            break\n\n          // wasm has computed forces for us\n\n          case 'nBodyForces':\n            self.workerCalculating = false\n            // Accept/Reject the promise to resolve await this.calculateForces() in step() above\n            if (msg.error) {\n              self.forcesReject(msg.error)\n            } else {\n              self.arrForces = msg.arrForces\n              self.forcesResolve(self.arrForces)\n            }\n            break\n        }\n      }\n    }\n\n    // Fetch and compile the wasm module because web workers cannot fetch()\n    WebAssembly.compileStreaming(fetch(\"assembly/nBodyForces.wasm\"))\n    // Send the compiled wasm module to the worker as a message\n    .then(wasmModule => {\n      self.worker.postMessage({ purpose: 'wasmModule', wasmModule })\n    });\n  }\n}\n","import { nBodyVisualizer, nBodyVisWebVR } from \"./nBodyVisualizer\"\nimport { Body, nBodySimulator } from \"./nBodySimulator\"\n\nwindow.onload = function() {\n  // Create a Simulation\n  const sim = new nBodySimulator()\n  \n  // Add some visualizers\n  //sim.addVisualization(new nBodyVisualizer()) // console visualizer\n  sim.addVisualization(new nBodyVisWebVR(document.getElementById(\"a-bodies\"), sim)) // this Visualizer manages the UI and needs Body and sim to add debris\n  \n  // This is a simulation, using opinionated G = 6.674e-11\n  // So boring values are allowed and create systems that collapse over billions of years.\n\n  // For spinny, where distance = 1, masses of 1e10 are fun\n\n  // Set Z coords to 1 for best visualiztion in overhead 2d Canvas, and so any clickable objects are above the plane\n  // lol, making up stable universes is hard\n  //                   name            color     x    y    z    m      vz    vy   vz\n  sim.addBody(new Body(\"star\",         \"yellow\", 0,   0,   1,   1e9)) \n  sim.addBody(new Body(\"hot-jupiter\",  \"red\",   -1,  -1,   1,   1e4,  .24,  -0.05,  0))\n  sim.addBody(new Body(\"cold-jupiter\", \"purple\", 4,   4,  .5,   1e4, -.07,   0.04,  0))\n\n  // Start simulation  \n  sim.start()\n  \n  // Add another\n  sim.addBody(new Body(\"saturn\",       \"blue\",  -8,  -8,  .1,   1e3,   .07,   -.035,  0))\n\n  // That is the extent of my effort to hand craft a stable solar system.\n\n  // We can now play in that system by throwing debris around (inner plants)\n  // Because that debris will have significanly smaller mass, it won't disturb our stable system (hopefully :-)\n  // This requires we remove bodies that fly out of bounds past our 15x15 astroids.  \n  // See sim.trimDebris().  It's a bit hacky, but my client (me) doesn't want to pay for it and wants the WebVR version\n}\n"],"names":["nBodyVisualizer","[object Object]","htmlElement","this","resize","scaleSize","bodies","console","log","JSON","stringify","nBodyVisWebVR","sim","super","window","nextId","i","lookup","reduce","total","body","aframeId","name","aSimBodies","document","querySelectorAll","length","id","parentNode","removeChild","aBody","forEach","getElementById","innerHTML","x","y","z","drawSize","color","object3D","position","set","AFRAME","registerComponent","init","rando","scale","Math","random","el","addEventListener","evt","addBodyArgs","Body","mass","vX","vY","vZ","forceX","forceY","forceZ","min","max","log10","nBodySimulator","setupWebWorker","simulationSpeed","objBodies","bodySize","forceSize","debrisBounds","workerReady","workerCalculating","visualizations","push","addBody","step","bind","setInterval","ready","calculateForces","trimDebris","applyForces","visualize","arrBodies","index","b","ret","Promise","resolve","reject","forcesResolve","forcesReject","worker","postMessage","purpose","filter","isNaN","arrForces","vis","paint","Worker","onerror","message","self","onmessage","data","msg","error","WebAssembly","compileStreaming","fetch","then","wasmModule","onload","addVisualization","start"],"mappings":"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"}