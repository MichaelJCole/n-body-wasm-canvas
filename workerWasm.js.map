{"version":3,"file":"workerWasm.js","sources":["../node_modules/assemblyscript/lib/loader/index.js","../src/workerWasm.js"],"sourcesContent":["\"use strict\";\n\n// Runtime header offsets\nconst ID_OFFSET = -8;\nconst SIZE_OFFSET = -4;\n\n// Runtime ids\nconst ARRAYBUFFER_ID = 0;\nconst STRING_ID = 1;\nconst ARRAYBUFFERVIEW_ID = 2;\n\n// Runtime type information\nconst ARRAYBUFFERVIEW = 1 << 0;\nconst ARRAY = 1 << 1;\nconst SET = 1 << 2;\nconst MAP = 1 << 3;\nconst VAL_ALIGN_OFFSET = 5;\nconst VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;\nconst VAL_SIGNED = 1 << 10;\nconst VAL_FLOAT = 1 << 11;\nconst VAL_NULLABLE = 1 << 12;\nconst VAL_MANAGED = 1 << 13;\nconst KEY_ALIGN_OFFSET = 14;\nconst KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;\nconst KEY_SIGNED = 1 << 19;\nconst KEY_FLOAT = 1 << 20;\nconst KEY_NULLABLE = 1 << 21;\nconst KEY_MANAGED = 1 << 22;\n\n// Array(BufferView) layout\nconst ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\nconst ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\nconst ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\nconst ARRAYBUFFERVIEW_SIZE = 12;\nconst ARRAY_LENGTH_OFFSET = 12;\nconst ARRAY_SIZE = 16;\n\nconst BIGINT = typeof BigUint64Array !== \"undefined\";\nconst THIS = Symbol();\nconst CHUNKSIZE = 1024;\n\n/** Gets a string from an U32 and an U16 view on a memory. */\nfunction getStringImpl(buffer, ptr) {\n  const U32 = new Uint32Array(buffer);\n  const U16 = new Uint16Array(buffer);\n  var length = U32[(ptr + SIZE_OFFSET) >>> 2] >>> 1;\n  var offset = ptr >>> 1;\n  if (length <= CHUNKSIZE) return String.fromCharCode.apply(String, U16.subarray(offset, offset + length));\n  const parts = [];\n  do {\n    const last = U16[offset + CHUNKSIZE - 1];\n    const size = last >= 0xD800 && last < 0xDC00 ? CHUNKSIZE - 1 : CHUNKSIZE;\n    parts.push(String.fromCharCode.apply(String, U16.subarray(offset, offset += size)));\n    length -= size;\n  } while (length > CHUNKSIZE);\n  return parts.join(\"\") + String.fromCharCode.apply(String, U16.subarray(offset, offset + length));\n}\n\n/** Prepares the base module prior to instantiation. */\nfunction preInstantiate(imports) {\n  const baseModule = {};\n\n  function getString(memory, ptr) {\n    if (!memory) return \"<yet unknown>\";\n    return getStringImpl(memory.buffer, ptr);\n  }\n\n  // add common imports used by stdlib for convenience\n  const env = (imports.env = imports.env || {});\n  env.abort = env.abort || function abort(mesg, file, line, colm) {\n    const memory = baseModule.memory || env.memory; // prefer exported, otherwise try imported\n    throw Error(\"abort: \" + getString(memory, mesg) + \" at \" + getString(memory, file) + \":\" + line + \":\" + colm);\n  }\n  env.trace = env.trace || function trace(mesg, n) {\n    const memory = baseModule.memory || env.memory;\n    console.log(\"trace: \" + getString(memory, mesg) + (n ? \" \" : \"\") + Array.prototype.slice.call(arguments, 2, 2 + n).join(\", \"));\n  }\n  imports.Math = imports.Math || Math;\n  imports.Date = imports.Date || Date;\n\n  return baseModule;\n}\n\n/** Prepares the final module once instantiation is complete. */\nfunction postInstantiate(baseModule, instance) {\n  const rawExports = instance.exports;\n  const memory = rawExports.memory;\n  const table = rawExports.table;\n  const alloc = rawExports[\"__alloc\"];\n  const retain = rawExports[\"__retain\"];\n  const rttiBase = rawExports[\"__rtti_base\"] || ~0; // oob if not present\n\n  /** Gets the runtime type info for the given id. */\n  function getInfo(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = U32[rttiBase >>> 2];\n    if ((id >>>= 0) >= count) throw Error(\"invalid id: \" + id);\n    return U32[(rttiBase + 4 >>> 2) + id * 2];\n  }\n\n  /** Gets the runtime base id for the given id. */\n  function getBase(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = U32[rttiBase >>> 2];\n    if ((id >>>= 0) >= count) throw Error(\"invalid id: \" + id);\n    return U32[(rttiBase + 4 >>> 2) + id * 2 + 1];\n  }\n\n  /** Gets the runtime alignment of a collection's values. */\n  function getValueAlign(info) {\n    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Gets the runtime alignment of a collection's keys. */\n  function getKeyAlign(info) {\n    return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Allocates a new string in the module's memory and returns its retained pointer. */\n  function __allocString(str) {\n    const length = str.length;\n    const ptr = alloc(length << 1, STRING_ID);\n    const U16 = new Uint16Array(memory.buffer);\n    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);\n    return ptr;\n  }\n\n  baseModule.__allocString = __allocString;\n\n  /** Reads a string from the module's memory by its pointer. */\n  function __getString(ptr) {\n    const buffer = memory.buffer;\n    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];\n    if (id !== STRING_ID) throw Error(\"not a string: \" + ptr);\n    return getStringImpl(buffer, ptr);\n  }\n\n  baseModule.__getString = __getString;\n\n  /** Gets the view matching the specified alignment, signedness and floatness. */\n  function getView(alignLog2, signed, float) {\n    const buffer = memory.buffer;\n    if (float) {\n      switch (alignLog2) {\n        case 2: return new Float32Array(buffer);\n        case 3: return new Float64Array(buffer);\n      }\n    } else {\n      switch (alignLog2) {\n        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\n        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\n        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\n        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\n      }\n    }\n    throw Error(\"unsupported align: \" + alignLog2);\n  }\n\n  /** Allocates a new array in the module's memory and returns its retained pointer. */\n  function __allocArray(id, values) {\n    const info = getInfo(id);\n    if (!(info & (ARRAYBUFFERVIEW | ARRAY))) throw Error(\"not an array: \" + id + \" @ \" + info);\n    const align = getValueAlign(info);\n    const length = values.length;\n    const buf = alloc(length << align, ARRAYBUFFER_ID);\n    const arr = alloc(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);\n    const U32 = new Uint32Array(memory.buffer);\n    U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = retain(buf);\n    U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\n    U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\n    if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;\n    const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);\n    if (info & VAL_MANAGED) {\n      for (let i = 0; i < length; ++i) view[(buf >>> align) + i] = retain(values[i]);\n    } else {\n      view.set(values, buf >>> align);\n    }\n    return arr;\n  }\n\n  baseModule.__allocArray = __allocArray;\n\n  /** Gets a view on the values of an array in the module's memory. */\n  function __getArrayView(arr) {\n    const U32 = new Uint32Array(memory.buffer);\n    const id = U32[arr + ID_OFFSET >>> 2];\n    const info = getInfo(id);\n    if (!(info & ARRAYBUFFERVIEW)) throw Error(\"not an array: \" + id);\n    const align = getValueAlign(info);\n    var buf = U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    const length = info & ARRAY\n      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]\n      : U32[buf + SIZE_OFFSET >>> 2] >>> align;\n    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT)\n          .slice(buf >>>= align, buf + length);\n  }\n\n  baseModule.__getArrayView = __getArrayView;\n\n  /** Reads (copies) the values of an array from the module's memory. */\n  function __getArray(arr) {\n    const input = __getArrayView(arr);\n    const len = input.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; i++) out[i] = input[i];\n    return out;\n  }\n\n  baseModule.__getArray = __getArray;\n\n  /** Reads (copies) the data of an ArrayBuffer from the module's memory. */\n  function __getArrayBuffer(ptr) {\n    const buffer = memory.buffer;\n    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];\n    return buffer.slice(ptr, ptr + length);\n  }\n\n  baseModule.__getArrayBuffer = __getArrayBuffer;\n\n  function getTypedArrayImpl(Type, alignLog2, ptr) {\n    const buffer = memory.buffer;\n    const U32 = new Uint32Array(buffer);\n    const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    const length = U32[bufPtr + SIZE_OFFSET >>> 2];\n    return new Type(buffer).slice(bufPtr >>> alignLog2, bufPtr + length >>> alignLog2);\n  }\n\n  /** Gets a view on the values of a known-to-be Int8Array in the module's memory. */\n  baseModule.__getInt8Array = getTypedArrayImpl.bind(null, Int8Array, 0);\n  /** Gets a view on the values of a known-to-be Uint8Array in the module's memory. */\n  baseModule.__getUint8Array = getTypedArrayImpl.bind(null, Uint8Array, 0);\n  /** Gets a view on the values of a known-to-be Uint8ClampedArray in the module's memory. */\n  baseModule.__getUint8ClampedArray = getTypedArrayImpl.bind(null, Uint8ClampedArray, 0);\n  /** Gets a view on the values of a known-to-be Int16Array in the module's memory. */\n  baseModule.__getInt16Array = getTypedArrayImpl.bind(null, Int16Array, 1);\n  /** Gets a view on the values of a known-to-be Uint16Array in the module's memory. */\n  baseModule.__getUint16Array = getTypedArrayImpl.bind(null, Uint16Array, 1);\n  /** Gets a view on the values of a known-to-be Int32Array in the module's memory. */\n  baseModule.__getInt32Array = getTypedArrayImpl.bind(null, Int32Array, 2);\n  /** Gets a view on the values of a known-to-be Uint32Array in the module's memory. */\n  baseModule.__getUint32Array = getTypedArrayImpl.bind(null, Uint32Array, 2);\n  if (BIGINT) {\n    /** Gets a view on the values of a known-to-be-Int64Array in the module's memory. */\n    baseModule.__getInt64Array = getTypedArrayImpl.bind(null, BigInt64Array, 3);\n    /** Gets a view on the values of a known-to-be-Uint64Array in the module's memory. */\n    baseModule.__getUint64Array = getTypedArrayImpl.bind(null, BigUint64Array, 3);\n  }\n  /** Gets a view on the values of a known-to-be Float32Array in the module's memory. */\n  baseModule.__getFloat32Array = getTypedArrayImpl.bind(null, Float32Array, 2);\n  /** Gets a view on the values of a known-to-be Float64Array in the module's memory. */\n  baseModule.__getFloat64Array = getTypedArrayImpl.bind(null, Float64Array, 3);\n\n  /** Tests whether an object is an instance of the class represented by the specified base id. */\n  function __instanceof(ptr, baseId) {\n    const U32 = new Uint32Array(memory.buffer);\n    var id = U32[(ptr + ID_OFFSET) >>> 2];\n    if (id <= U32[rttiBase >>> 2]) {\n      do if (id == baseId) return true;\n      while (id = getBase(id));\n    }\n    return false;\n  }\n\n  baseModule.__instanceof = __instanceof;\n\n  // Pull basic exports to baseModule so code in preInstantiate can use them\n  baseModule.memory = baseModule.memory || memory;\n  baseModule.table  = baseModule.table  || table;\n\n  // Demangle exports and provide the usual utility on the prototype\n  return demangle(rawExports, baseModule);\n}\n\n/** Wraps a WebAssembly function while also taking care of variable arguments. */\nfunction wrapFunction(fn, setargc) {\n  var wrap = (...args) => {\n    setargc(args.length);\n    return fn(...args);\n  }\n  wrap.original = fn;\n  return wrap;\n}\n\n/** Instantiates an AssemblyScript module using the specified imports. */\nfunction instantiate(module, imports) {\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    new WebAssembly.Instance(module, imports)\n  );\n}\n\nexports.instantiate = instantiate;\n\n/** Instantiates an AssemblyScript module from a buffer using the specified imports. */\nfunction instantiateBuffer(buffer, imports) {\n  return instantiate(new WebAssembly.Module(buffer), imports);\n}\n\nexports.instantiateBuffer = instantiateBuffer;\n\n/** Instantiates an AssemblyScript module from a response using the specified imports. */\nasync function instantiateStreaming(response, imports) {\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    (await WebAssembly.instantiateStreaming(response, imports)).instance\n  );\n}\n\nexports.instantiateStreaming = instantiateStreaming;\n\n/** Demangles an AssemblyScript module's exports to a friendly object structure. */\nfunction demangle(exports, baseModule) {\n  var module = baseModule ? Object.create(baseModule) : {};\n  var setargc = exports[\"__setargc\"] || function() {};\n  function hasOwnProperty(elem, prop) {\n    return Object.prototype.hasOwnProperty.call(elem, prop);\n  }\n  for (let internalName in exports) {\n    if (!hasOwnProperty(exports, internalName)) continue;\n    let elem = exports[internalName];\n    let parts = internalName.split(\".\");\n    let curr = module;\n    while (parts.length > 1) {\n      let part = parts.shift();\n      if (!hasOwnProperty(curr, part)) curr[part] = {};\n      curr = curr[part];\n    }\n    let name = parts[0];\n    let hash = name.indexOf(\"#\");\n    if (hash >= 0) {\n      let className = name.substring(0, hash);\n      let classElem = curr[className];\n      if (typeof classElem === \"undefined\" || !classElem.prototype) {\n        let ctor = function(...args) {\n          return ctor.wrap(ctor.prototype.constructor(0, ...args));\n        };\n        ctor.prototype = {\n          valueOf: function valueOf() {\n            return this[THIS];\n          }\n        };\n        ctor.wrap = function(thisValue) {\n          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });\n        };\n        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>\n          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))\n        );\n        curr[className] = ctor;\n      }\n      name = name.substring(hash + 1);\n      curr = curr[className].prototype;\n      if (/^(get|set):/.test(name)) {\n        if (!hasOwnProperty(curr, name = name.substring(4))) {\n          let getter = exports[internalName.replace(\"set:\", \"get:\")];\n          let setter = exports[internalName.replace(\"get:\", \"set:\")];\n          Object.defineProperty(curr, name, {\n            get: function() { return getter(this[THIS]); },\n            set: function(value) { setter(this[THIS], value); },\n            enumerable: true\n          });\n        }\n      } else {\n        if (name === 'constructor') {\n          curr[name] = wrapFunction(elem, setargc);\n        } else { // for methods\n          Object.defineProperty(curr, name, {\n            value: function (...args) {\n              setargc(args.length);\n              return elem(this[THIS], ...args);\n            }\n          });\n        }\n      }\n    } else {\n      if (/^(get|set):/.test(name)) {\n        if (!hasOwnProperty(curr, name = name.substring(4))) {\n          Object.defineProperty(curr, name, {\n            get: exports[internalName.replace(\"set:\", \"get:\")],\n            set: exports[internalName.replace(\"get:\", \"set:\")],\n            enumerable: true\n          });\n        }\n      } else if (typeof elem === \"function\") {\n        curr[name] = wrapFunction(elem, setargc);\n      } else {\n        curr[name] = elem;\n      }\n    }\n  }\n\n  return module;\n}\n\nexports.demangle = demangle;\n","/**\n * The WebAssembly module instance that we'll be working with\n * synchronous in this web worker thread.\n * \n * The .wasm file data is message'd from the main thread because a web worker cannot fetch() from the network.\n */\nvar wasm = null\n\n\n/**\n * The assemblyscript loader.  It adds helpers for moving data to/from AssemblyScript.  Highly recommended\n */\nconst loader = require(\"assemblyscript/lib/loader\")\n\n/**\n * When we instantiate the .wasm module, give it a context to work in:\n * nBodyForces: {} is a table of functions we can import into AssemblyScript.  See top of nBodyForces.ts\n * env: {} describes the environment sent to the Wasm module as it's instantiated\n */\nconst importObj = {\n  nBodyForces: {\n    logI(data) { console.log(\"Log() - \" + data); },\n    logF(data) { console.log(\"Log() - \" + data); },\n    logS(data) { console.log(\"Log() - \" + wasm.__getString(data)); },\n\n  },\n  env: {\n    abort(msg, file, line, column) {\n      // wasm.__getString() is added by assemblyscript's loader: https://github.com/AssemblyScript/assemblyscript/tree/master/lib/loader\n      console.error(\"abort: (\" + wasm.__getString(msg) + \") at \" + wasm.__getString(file) + \":\" + line + \":\" + column);\n    },\n    trace(msg, n) {\n      console.log(\"trace: \" + wasm.__getString(msg) + (n ? \" \" : \"\") + Array.prototype.slice.call(arguments, 2, 2 + n).join(\", \"));\n    }\n  }\n}\n\n/**\n * Web Workers listen for messages from the main thread.  This is the entire API surface area\n */\nthis.onmessage = function (evt) {\n\n  // message from UI thread\n  var msg = evt.data \n  switch (msg.purpose) {\n\n    // Message: Load new wasm module\n\n    case 'wasmModule': \n      // Instantiate the compiled module we were passed.\n      wasm = loader.instantiate(msg.wasmModule, importObj)  // Throws\n      // Tell nBodySimulation.js we are ready\n      this.postMessage({ purpose: 'wasmReady' })\n      return \n\n\n    // Message: Given array of floats describing a system of bodies (x,y,x,mass), \n    // calculate the Grav forces to be applied to each body\n\n    case 'nBodyForces':\n      if (!wasm) throw new Error('wasm not initialized')\n\n      // Copy msg.arrBodies array into the wasm instance, increase GC count\n      const dataRef = wasm.__retain(wasm.__allocArray(wasm.FLOAT64ARRAY_ID, msg.arrBodies));\n      // Do the calculations in this thread synchronously\n      const resultRef = wasm.nBodyForces(dataRef);\n      // Copy result array from the wasm instance to our javascript runtime\n      const arrForces = wasm.__getFloat64Array(resultRef);\n\n      // Decrease the GC count on dataRef from __retain() here, and GC count from new Float64Array in wasm module\n      wasm.__release(dataRef);\n      wasm.__release(resultRef);\n      \n      // Message results back to main thread.  see nBodySimulation.js this.worker.onmessage\n      return this.postMessage({\n        purpose: 'nBodyForces', \n        arrForces\n      })\n  }\n}"],"names":["ID_OFFSET","SIZE_OFFSET","ARRAYBUFFER_ID","STRING_ID","ARRAYBUFFERVIEW","ARRAY","VAL_ALIGN_OFFSET","VAL_SIGNED","VAL_FLOAT","VAL_MANAGED","ARRAYBUFFERVIEW_BUFFER_OFFSET","ARRAYBUFFERVIEW_DATASTART_OFFSET","ARRAYBUFFERVIEW_DATALENGTH_OFFSET","ARRAYBUFFERVIEW_SIZE","ARRAY_LENGTH_OFFSET","ARRAY_SIZE","BIGINT","BigUint64Array","THIS","Symbol","CHUNKSIZE","getStringImpl","buffer","ptr","U32","Uint32Array","U16","Uint16Array","length","offset","String","fromCharCode","apply","subarray","parts","last","size","push","join","preInstantiate","imports","baseModule","getString","memory","env","abort","mesg","file","line","colm","Error","trace","n","console","log","Array","prototype","slice","call","arguments","Math","Date","postInstantiate","instance","rawExports","exports","table","alloc","retain","rttiBase","getInfo","id","getBase","getValueAlign","info","clz32","getView","alignLog2","signed","float","Float32Array","Float64Array","Int8Array","Uint8Array","Int16Array","Int32Array","BigInt64Array","__getArrayView","arr","align","buf","getTypedArrayImpl","Type","bufPtr","__allocString","str","i","p","charCodeAt","__getString","__allocArray","values","view","set","__getArray","input","len","out","__getArrayBuffer","__getInt8Array","bind","__getUint8Array","__getUint8ClampedArray","Uint8ClampedArray","__getInt16Array","__getUint16Array","__getInt32Array","__getUint32Array","__getInt64Array","__getUint64Array","__getFloat32Array","__getFloat64Array","__instanceof","baseId","demangle","wrapFunction","fn","setargc","wrap","args","original","instantiate","module","WebAssembly","Instance","Object","create","hasOwnProperty","elem","prop","internalName","split","curr","part","shift","name","hash","indexOf","className","substring","classElem","ctor","constructor","valueOf","this","thisValue","[object Object]","value","writable","getOwnPropertyNames","forEach","defineProperty","getOwnPropertyDescriptor","test","getter","replace","setter","get","enumerable","Module","async","response","instantiateStreaming","wasm","importObj","nBodyForces","data","msg","column","error","onmessage","evt","purpose","loader","wasmModule","postMessage","dataRef","__retain","FLOAT64ARRAY_ID","arrBodies","resultRef","arrForces","__release"],"mappings":"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"}