{"version":3,"file":"main.js","sources":["../src/nBodyVisualizer.js","../src/nBodySimulator.js","../src/main.js"],"sourcesContent":["/**\n * This is a toolkit of visualizers for our simulation.\n */\n\n/**\n * Base class that console.log()s the simulation state.\n */\nexport class nBodyVisualizer {\n  constructor(htmlElement) {\n    this.htmlElement = htmlElement\n    this.resize()\n  }\n\n  resize() {}\n\n  paint(bodies) {\n    console.log(JSON.stringify(bodies, null, 2))\n  }\n\n}\n\n/**\n * Pretty print simulation to an htmlElement's innerHTML\n */\nexport class nBodyVisPrettyPrint extends nBodyVisualizer {\n  constructor(htmlElement) {\n    super(htmlElement)\n  }\n\n  resize() {}\n\n  paint(bodies) {\n    let text = ''\n    bodies.forEach( body => {\n      text += `<br>${body.name} {<br>  x:${body.x.toPrecision(2)}<br>  y:${body.y.toPrecision(2)}<br>  z:${body.z.toPrecision(2)}<br>  mass:${body.mass.toPrecision(2)})<br>}<br>${body.drawSize}`\n    })\n    if (this.htmlElement) this.htmlElement.innerHTML = text\n  }\n}\n\n/**\n * Draw simulation state to Canvas\n */\nexport class nBodyVisCanvas extends nBodyVisualizer {\n  constructor(htmlElement) {\n    super(htmlElement)\n\n    // Listen for resize to scale our simulation\n    window.onresize = this.resize.bind(this)\n  }\n\n  // If the window is resized, we need to resize our visualization\n  resize() {\n    if (!this.htmlElement) return\n    this.sizeX = this.htmlElement.offsetWidth\n    this.sizeY = this.htmlElement.offsetHeight\n    this.htmlElement.width = this.sizeX\n    this.htmlElement.height = this.sizeY\n    this.vis = this.htmlElement.getContext('2d')\n  }\n\n  // Paint on the canvas\n  paint(bodies) {\n    if (!this.htmlElement) return\n    // We need to convert our 3d float universe to a 2d pixel visualization\n    // calculate shift and scale\n    const bounds = this.bounds(bodies)\n    const shiftX = bounds.xMin\n    const shiftY = bounds.yMin\n    const twoPie = 2 * Math.PI\n    \n    let scaleX = this.sizeX / (bounds.xMax - bounds.xMin)\n    let scaleY = this.sizeY / (bounds.yMax - bounds.yMin)\n    if (isNaN(scaleX) || !isFinite(scaleX) || scaleX < 15) scaleX = 15\n    if (isNaN(scaleY) || !isFinite(scaleY) || scaleY < 15) scaleY = 15\n\n    // Begin Draw\n    this.vis.clearRect(0, 0, this.vis.canvas.width, this.vis.canvas.height)\n    bodies.forEach((body, index) => {\n      // Center\n      const drawX = (body.x - shiftX) * scaleX\n      const drawY = (body.y - shiftY) * scaleY\n      // Draw on canvas\n      this.vis.beginPath();\n      this.vis.arc(drawX, drawY, body.drawSize, 0, twoPie, false);\n      this.vis.fillStyle = body.color || \"#aaa\"\n      this.vis.fill();\n    });\n  }\n\n  // Because we draw the 3d space in 2d from the top, we ignore z\n  bounds(bodies) {\n    const ret = { xMin: 0, xMax: 0, yMin: 0, yMax: 0, zMin: 0, zMax: 0 }\n    bodies.forEach(body => {\n      if (ret.xMin > body.x) ret.xMin = body.x\n      if (ret.xMax < body.x) ret.xMax = body.x\n      if (ret.yMin > body.y) ret.yMin = body.y\n      if (ret.yMax < body.y) ret.yMax = body.y\n      if (ret.zMin > body.z) ret.zMin = body.z\n      if (ret.zMax < body.z) ret.zMax = body.z\n    })\n    return ret\n  }\n}\n","/**\n * This creates an n-body simulation in 3d space using mass, distance, and gravity.\n * \n * Example usage:\n * \n * const sim = new nBodySimulator()\n * \n * sim.addVisualization(new nBodyVisPrettyPrint())\n * sim.addVisualization(new nBodyVisCanvas())\n * \n * // Set Z coords to 1 for best visualiztion in overhead 2d Canvas\n * sim.addBody(new Body(1, 1, 1, 100))\n * \n * // Start simulation with empty universe, then add bodies.  \n * sim.start()\n * sim.addBody(new Body(-1, -1, 1, 100))\n * sim.addBody(new Body(2, -2, 1, 100))\n */\n\n/**\n * Body doesn't do much and resists change.  For our purposes, negative mass is fun.\n * \n * If pX or pY are unspecified, we give the body random initial momentum \n * so the spinny doesn't devolve to weird oscilating linear orbit\n \n * No collisions or splody are implemented.\n */\nexport class Body {\n  constructor(name, color, x, y, z, mass, vX, vY, vZ) {\n    this.name = name\n    this.color = color\n    this.x = x\n    this.y = y\n    this.z = z\n    this.mass = mass\n    \n    this.vX = vX || 0\n    this.vY = vY || 0\n    this.vZ = vZ || 0\n\n    this.forceX = 0\n    this.forceY = 0\n    this.forceZ = 0\n\n    this.drawSize = Math.min(   Math.max( Math.log10(mass), 1),   10)\n  }\n}\n\n\n/**\n * Our n-body system simulator\n */\nexport class nBodySimulator {\n\n  constructor() {\n    this.setupWebWorker()\n\n    // 1000 ms/s / 33 ms/frame = 30 frame/sec.  FIXME this could be replaced with requestAnimationFrame()\n    this.simulationSpeed = 33\n\n    // Source of truth\n    this.objBodies = []\n    \n    // used to index arrBodies\n    this.bodySize = 4   // x,y,z,mass\n\n    // used to index arrForces\n    this.forceSize = 3  // x,y,z\n\n    // Debris bounds.  see trimDebris().\n    this.debrisBounds = 12\n\n    // Has the worker been setup?\n    this.workerReady = false\n    // Is the worker calculating\n    this.workerCalculating = false\n\n    // Array of our visualizations\n    this.visualizations = []\n  }\n\n  /**\n   * Is the simulation ready to calculate\n   */\n  ready() {\n    return this.workerReady && !this.workerCalculating\n  }\n\n  /**\n   * Add a body to the simulation.\n   */\n  addBody(body) {\n    this.objBodies.push(body)\n  }\n\n  /**\n   * Start the simulation loop\n   */\n  start() {\n    // This is the simulation loop.  step() calls visualize()\n    const step = this.step.bind(this)\n    setInterval(step, this.simulationSpeed)\n  }\n\n  /**\n   * This is the simulation loop.\n   */\n  async step() {\n    // Skip calculation if worker not ready.  We scheduled this to run every 33ms (30fps), so expect it to skip.\n    if (this.ready()) {\n      await this.calculateForces()\n    } else {\n      console.log(`Skipping calcuation:  WorkerReady: ${this.workerReady}   WorkerCalculating: ${this.workerCalculating}`)\n    }\n    // Remove any \"debris\" that has traveled out of bounds - this is for the button\n    this.trimDebris()\n\n    // Now Update forces.  Reuse old forces if worker is already busy calculating.\n    this.applyForces()\n\n    // Now Visualize\n    this.visualize()\n  }\n\n  /** \n   * Use our web worker to calculate the forces to apply on our bodies.\n   */\n  calculateForces() {\n    this.workerCalculating = true\n    this.arrBodies = []\n\n    // Copy data to array\n    this.objBodies.forEach((body, index) => {\n      const b = index * this.bodySize\n      this.arrBodies[b] = body.x\n      this.arrBodies[b + 1] = body.y\n      this.arrBodies[b + 2] = body.z\n      this.arrBodies[b + 3] = body.mass\n    })\n\n    // return promise that worker.onmessage will fulfill\n    const ret = new Promise((resolve, reject) => {\n      this.forcesResolve = resolve\n      this.forcesReject = reject\n    })\n    \n    // postMessage() to worker to start calculation\n    // Execution continues in workerWasm.js worker.onmessage()\n    this.worker.postMessage({ \n      purpose: 'nBodyForces',\n      arrBodies: this.arrBodies,\n    })\n\n    // Return promise for completion\n    // Promise is resolve()d in this.worker.onmessage() below.\n    // Once resolved, execution continees in step() above - await this.calculateForces()\n    return ret\n  }\n\n  /**\n   * Trim debris.  We let the player/user throw random bits into the universe for fun.\n   * But fun means watching it fly off, not the vis camera fly around.\n   * So we remove stuff that's gotten out of bounds\n   */\n  trimDebris() {\n    this.objBodies = this.objBodies.filter( body => {\n      if (body.name !==\"debris\") return true\n      if (isNaN(body.x) || isNaN(body.y) || isNaN(body.z)) return false\n      if (body.x < -this.debrisBounds || body.x > this.debrisBounds) return false\n      if (body.y < -this.debrisBounds || body.y > this.debrisBounds) return false\n      if (body.z < -this.debrisBounds || body.z > this.debrisBounds) return false\n      return true\n    })\n  }\n\n  /**\n   * Apply those forces.  Yes, this could be moved out of the UI thread,\n   * but passing objects across Wasm boundaries is dumb-hard - the kind of hard that is neither fun nor profitable.\n   * \n   * Physics:\n   * \n   * V = d/t             Velocity = distance / time\n   * P = mV              Momentum = mass * Velocity\n   * F = ma              Force = mass * acceleration\n   * \n   * Given the positions and mass of our bodies, we calculated the Grav forces applied in arrForces.\n   * \n   * Now, we want to push the bodies around using the forces.\n   * \n   * This is me trying to remember how to do high school physics.\n   * \n   * Given our positions and forces, \n   * \n   * F = ma.            Known F (wasm) and m (body)\n   * a = F/m.           Known a\n   * a = dV / t.        Known t (1/tick) - we will apply previous forces, so t always = 1\n   * F/m = dV / t\n   * dV = Ft/m\n   * V2 = V1 + dV       Known dV, V1\n   * x2 = x1 + V2 * t   Known x1, V2, t\n   * \n   * x2 = x1 + (V1 + (F/m))\n   * \n   * body.vX = body.vX + body.forceX / body.mass\n   * body.x = body.x + body.vX\n   */\n  applyForces() {\n    this.objBodies.forEach( (body, i) => {\n\n      if (body.mass === 0 || !this.arrForces) return // 0 mass bodies are used to position the camera min viewin the canvas visualizer.\n\n      // Capture forces\n      body.forceX = this.arrForces[i * this.forceSize + 0]\n      body.forceY = this.arrForces[i * this.forceSize + 1]\n      body.forceZ = this.arrForces[i * this.forceSize + 2]\n\n      // Convert to velocity.  We could remove mass in nBodyForces.ts and just send velocities, but I'm moving this project to the done pile.\n      body.vX = body.vX + body.forceX / body.mass\n      body.vY = body.vY + body.forceY / body.mass  \n      body.vZ = body.vZ + body.forceZ / body.mass  \n\n      // Update position from velocity\n      body.x = body.x + body.vX\n      body.y = body.y + body.vY\n      body.z = body.z + body.vZ\n    })\n  }\n\n  /**\n   * Loop through our visualizers and paint()\n   */\n  visualize() {\n    this.visualizations.forEach(vis => {\n      vis.paint(this.objBodies)\n    })\n  }\n\n  /**\n   * Add a visualizer to our list\n   */\n  addVisualization(vis) {\n    this.visualizations.push(vis)\n  }\n\n  /**\n   * Setup our web worker - buckle up, let's get weird.\n   */\n  setupWebWorker() {\n\n    // Create a Web Worker (separate thread) that we'll pass the WebAssembly module to.         \n    this.worker = new Worker(\"workerWasm.js\");\n\n    // Console errors from workerWasm.js\n    this.worker.onerror = function (evt) {\n      console.log(`Error from Web Worker: ${evt.message}`);\n    }\n\n    // Listen for messages from workerWasm.js postMessage()\n    const self = this\n    this.worker.onmessage = function (evt) {\n      if (evt && evt.data) {\n        \n        // Messages are dispatched by purpose\n        const msg = evt.data\n        switch (msg.purpose) {\n\n          // worker has loaded the wasm module we compiled and sent.  Let the magic begin!\n          // See postmessage at the bottom of this function.\n\n          case 'wasmReady': \n            self.workerReady = true\n            break\n\n          // wasm has computed forces for us\n\n          case 'nBodyForces':\n            self.workerCalculating = false\n            // Accept/Reject the promise to resolve await this.calculateForces() in step() above\n            if (msg.error) {\n              self.forcesReject(msg.error)\n            } else {\n              self.arrForces = msg.arrForces\n              self.forcesResolve(self.arrForces)\n            }\n            break\n        }\n      }\n    }\n\n    // Fetch and compile the wasm module because web workers cannot fetch()\n    WebAssembly.compileStreaming(fetch(\"assembly/nBodyForces.wasm\"))\n    // Send the compiled wasm module to the worker as a message\n    .then(wasmModule => {\n      self.worker.postMessage({ purpose: 'wasmModule', wasmModule })\n    });\n  }\n}\n","import { nBodyVisPrettyPrint, nBodyVisCanvas } from \"./nBodyVisualizer\"\nimport { Body, nBodySimulator } from \"./nBodySimulator\"\n\nwindow.onload = function() {\n  // Create a Simulation\n  const sim = new nBodySimulator()\n  \n  // Add some visualizers\n  sim.addVisualization(new nBodyVisPrettyPrint(document.getElementById(\"visPrettyPrint\")))\n  sim.addVisualization(new nBodyVisCanvas(document.getElementById(\"visCanvas\")))\n  \n  // This is a simulation, using opinionated G = 6.674e-11\n  // So boring values are allowed and create systems that collapse over billions of years.\n\n  // For spinny, where distance = 1, masses of 1e10 are fun\n\n  // Set Z coords to 1 for best visualiztion in overhead 2d Canvas\n  // lol, making up stable universes is hard\n  //                   name            color     x    y    z    m      vz    vy   vz\n  sim.addBody(new Body(\"star\",         \"yellow\", 0,   0,   0,   1e9)) \n  sim.addBody(new Body(\"hot jupiter\",  \"red\",   -1,  -1,   0,   1e4,  .24,  -0.05,  0))\n  sim.addBody(new Body(\"cold jupiter\", \"purple\", 4,   4, -.1,   1e4, -.07,   0.04,  0))\n  // A couple far-out asteroids to pin the canvas visualization in place.\n  sim.addBody(new Body(\"asteroid\",     \"black\", -15,  -15,  0,  0))  \n  sim.addBody(new Body(\"asteroid\",     \"black\",  15,   15,  0,  0))\n\n  // Start simulation  \n  sim.start()\n  \n  // Add another\n  sim.addBody(new Body(\"saturn\",       \"blue\",  -8,  -8,  .1,   1e3,   .07,   -.035,  0))\n\n  // That is the extent of my effort to hand craft a stable solar system.\n\n  // We can now play in that system by throwing debris around (inner plants)\n  // Because that debris will have significanly smaller mass, it won't disturb our stable system (hopefully :-)\n  // This requires we remove bodies that fly out of bounds past our 15x15 astroids.  \n  // See sim.trimDebris().  It's a bit hacky, but my client (me) doesn't want to pay for it and wants the WebVR version\n\n  function rando(scale) {\n    return (Math.random()-.5) * scale\n  }\n\n  document.getElementById(\"mayhem\").addEventListener('click', () => {\n    for (let x=0; x<10; x++) {\n      sim.addBody(new Body(\"debris\", \"white\", rando(10), rando(10), rando(10), 1, rando(.1), rando(.1), rando(.1)))\n    }\n  })\n\n}\n"],"names":[],"mappings":"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"}