{"version":3,"file":"main.js","sources":["../src/nBodyVisualizer.js","../src/nBodySimulator.js","../src/main.js"],"sourcesContent":["/**\n * This is a toolkit of visualizers for our simulation.\n */\n\n/**\n * Base class that console.log()s the simulation state.\n */\nexport class nBodyVisualizer {\n  constructor(htmlElement) {\n    this.htmlElement = htmlElement\n    this.resize()\n  }\n\n  resize() {}\n\n  paint(bodies) {\n    console.log(JSON.stringify(bodies, null, 2))\n  }\n\n}\n\n/**\n * Pretty print simulation to an htmlElement's innerHTML\n */\nexport class nBodyVisPrettyPrint extends nBodyVisualizer {\n  constructor(htmlElement) {\n    super(htmlElement)\n  }\n\n  resize() {}\n\n  paint(bodies) {\n    this.htmlElement.innerHTML = JSON.stringify(bodies, null, 2)\n  }\n}\n\n/**\n * Draw simulation state to Canvas\n */\nexport class nBodyVisCanvas extends nBodyVisualizer {\n  constructor(htmlElement) {\n    super(htmlElement)\n\n    // Listen for resize to scale our simulation\n    window.onresize = this.resize.bind(this)\n  }\n\n  // If the window is resized, we need to resize our visualization\n  resize() {\n    this.sizeX = this.htmlElement.offsetWidth\n    this.sizeY = this.htmlElement.offsetHeight\n    this.htmlElement.width = this.sizeX\n    this.htmlElement.height = this.sizeY\n    this.vis = this.htmlElement.getContext('2d')\n  }\n\n  // Paint on the canvas\n  paint() {\n    // We need to convert our 3d float universe to a 2d pixel visualization\n    // calculate shift and scale\n    const bounds = this.bounds()\n    const shiftX = bounds.xMin\n    const shiftY = bounds.yMin\n    const scaleX = this.sizeX / (bounds.xMax - bounds.xMin)\n    const scaleY = this.sizeY / (bounds.yMax - bounds.yMin)\n\n    // Begin Draw\n    this.vis.clearRect(0, 0, visX, visY)\n    const colors = ['#ff0000', '#0000ff', '#00ff00']\n    this.bodies.forEach((body, index) => {\n      // Fancy colors are nice\n      this.vis.fillStyle = colors[index % 3]\n      // Draw on canvas\n      const drawX = (body.x - shiftX) * scaleX\n      const drayY = (body.y - shiftY) * scaleY\n      this.vis.fillRect(x-10, y-10, 20, 20)  // draw 20x20 body\n    });\n  }\n\n  // Because we draw the 3d space in 2d from the top, we ignore z\n  bounds() {\n    const ret = { xMin: 0, xMax: 0, yMin: 0, yMax: 0 }\n    this.bodies.forEach(body => {\n      if (ret.xMin > body.x) ret.xMin = body.x\n      if (ret.xMax < body.x) ret.xMax = body.x\n      if (ret.yMin > body.y) ret.yMin = body.y\n      if (ret.yMax < body.y) ret.yMax = body.y\n    })\n    return ret\n  }\n}\n","/**\n * This creates an n-body simulation in 3d space using mass, distance, and gravity.\n * \n * Example usage:\n * \n * const sim = new nBodySimulator()\n * \n * sim.addVisualization(new nBodyVisPrettyPrint())\n * sim.addVisualization(new nBodyVisCanvas())\n * \n * // Set Z coords to 1 for best visualiztion in overhead 2d Canvas\n * sim.addBody(new Body(1, 1, 1, 100))\n * \n * // Start simulation with empty universe, then add bodies.  \n * sim.start()\n * sim.addBody(new Body(-1, -1, 1, 100))\n * sim.addBody(new Body(2, -2, 1, 100))\n */\n\n/**\n * Body doesn't do much and resists change.  For our purposes, negative mass is fun.\n * \n * If pX or pY are unspecified, we give the body random initial momentum \n * so the spinny doesn't devolve to weird oscilating linear orbit\n \n * No collisions or splody are implemented.\n */\nexport class Body {\n  constructor(x, y, z, mass, pX, pY, pZ) {\n    this.x = x\n    this.y = y\n    this.z = z\n    this.mass = mass\n    this.pX = (pX === undefined) ? (Math.random()-.5) * 10 : pX\n    this.pY = (pY === undefined) ? (Math.random()-.5) * 10 : pY\n    this.pZ = pZ\n  }\n}\n\n\n/**\n * Our n-body system simulator\n */\nexport class nBodySimulator {\n\n  constructor() {\n    this.setupWebWorker()\n\n    // 1000 ms/s / 33 ms/frame = 30 frame/sec.  FIXME this could be replaced with requestAnimationFrame()\n    this.simulationSpeed = 2000\n\n    // Source of truth\n    this.objBodies = []\n    \n    // used to index arrBodies\n    this.bodySize = 4   // x,y,z,mass\n\n    // used to index arrForces\n    this.forceSize = 3  // x,y,z\n\n    // Has the worker been setup?\n    this.workerReady = false\n    // Is the worker calculating\n    this.workerCalculating = false\n\n    // Array of our visualizations\n    this.visualizations = []\n\n  }\n\n  /**\n   * Is the simulation ready to calculate\n   */\n  ready() {\n    return this.workerReady && !this.workerCalculating\n  }\n\n  /**\n   * Add a body to the simulation.\n   */\n  addBody(body) {\n    this.objBodies.push(body)\n  }\n\n  /**\n   * Start the simulation loop\n   */\n  start() {\n    // This is the simulation loop.  step() calls visualize()\n    const step = this.step.bind(this)\n    //setInterval(step, this.simulationSpeed)\n  }\n\n  /**\n   * This is the simulation loop.\n   */\n  async step() {\n    // Skip calculation if worker not ready.  We scheduled this to run every 33ms (30fps), so expect it to skip.\n    if (this.ready()) {\n      await this.calculateForces()\n    } else {\n      console.log(`Skipping calcuation:  WorkerReady: ${this.workerReady}   WorkerCalculating: ${this.workerCalculating}`)\n    }\n\n    // Now Update forces.  Reuse old forces if worker is already busy calculating.\n    this.applyForces()\n\n    // Now Visualize\n    this.visualize()\n  }\n\n  /** \n   * Use our web worker to calculate the forces to apply on our bodies.\n   * \n   * CHALLENGE - pass an array of floats from here through web worker to wasm and return values back\n   */\n  calculateForces() {\n    this.workerCalculating = true\n    this.arrBodies = []\n\n    // Copy data to array\n    this.objBodies.forEach((body, index) => {\n      const b = index * this.bodySize\n      this.arrBodies[b] = body.x\n      this.arrBodies[b + 1] = body.y\n      this.arrBodies[b + 2] = body.z\n      this.arrBodies[b + 3] = body.mass\n    })\n\n    // return promise that worker.onmessage will fulfill\n    const ret = new Promise((resolve, reject) => {\n      this.forcesResolve = resolve\n      this.forcesReject = reject\n    })\n    \n    // postMessage() to worker to start calculation\n    // Continued in workerWasm.js worker.onmessage()\n    this.worker.postMessage({ \n      purpose: 'nBodyForces',\n      arrBodies: this.arrBodies,\n    })\n\n    // Continued in step()  await this.calculateForces()\n    return ret\n  }\n\n  /**\n   * Apply those forces.  Yes, this could be moved out of the UI thread.\n   */\n  applyForces() {\n    // Accelerate our bodies using the forces calcuated\n    // F = ma.   a = F/m.\n    // Here we convert magical forces to physical energy in the MatterJS world\n    // f = ma.   a = f/m.  \n    // Each body has one mass and several force polarities (pG, pM, pD).\n    // Force polarity also scales mass.  \n    //   pG = 1 regular gravity\n    //   pG = -1 regular anti-gravity\n    //   pG = -2 double-strength anti-gravity\n\n    // fG = ma*pG.  aG = f/m*pG\n    // a = dV / t\n    // v = x / t\n\n    // For MatterJS, we want to affect Velocity or Acceleration\n    // for our canvas simulation, we apply them linearly\n    //console.log('applyForces()', this.arrForces)\n  }\n\n  /**\n   * Loop through our visualizers and paint()\n   */\n  visualize() {\n    this.visualizations.forEach(vis => {\n      vis.paint(this.objBodies)\n    })\n  }\n\n  /**\n   * Add a visualizer to our list\n   */\n  addVisualization(vis) {\n    this.visualizations.push(vis)\n  }\n\n  /**\n   * Setup our web worker\n   */\n  setupWebWorker() {\n\n    // Create a Web Worker (separate thread) that we'll pass the WebAssembly module to.         \n    this.worker = new Worker(\"workerWasm.js\");\n\n    // Console errors from worker.js\n    this.worker.onerror = function (evt) {\n      console.log(`Error from Web Worker: ${evt.message}`);\n    }\n\n    // Listen for messages from worker.js postMessage()\n    const self = this\n    this.worker.onmessage = function (evt) {\n      if (evt && evt.data) {\n        const msg = evt.data\n        console.log('nBodySimulator.js', msg)\n\n        // Messages are dispatched by purpose\n        switch (msg.purpose) {\n\n          // worker has loaded the wasm module we compiled and sent.  Let the magic begin!\n          case 'wasmReady': \n            self.workerReady = true\n            break\n\n          // wasm has computed forces for us\n          case 'nBodyForces':\n            self.workerCalculating = false\n            if (msg.error) {\n              // Accept/Reject the promise to resolve await in step() above\n              self.forcesReject(msg.error)\n            } else {\n              this.arrForces = msg.arrForces\n              self.forcesResolve(this.arrForces)\n            }\n            break\n        }\n      }\n    }\n\n    // Fetch and compile the wasm module because web workers cannot fetch()\n    WebAssembly.compileStreaming(fetch(\"assembly/nBodyForces.wasm\"))\n    // Send the compiled wasm module to the worker as a message\n    .then(wasmModule => {\n      self.worker.postMessage({ purpose: 'wasmModule', wasmModule })\n    });\n  }\n}\n","import { nBodyVisPrettyPrint, nBodyVisCanvas } from \"./nBodyVisualizer\"\nimport { Body, nBodySimulator } from \"./nBodySimulator\"\n\nwindow.onload = function() {\n  // Create a Simulation\n  const sim = new nBodySimulator()\n  \n  // Add some visualizers\n  sim.addVisualization(new nBodyVisPrettyPrint(document.getElementById(\"visPrettyPrint\")))\n  //sim.addVisualization(new nBodyVisCanvas(document.getElementById(\"visCanvas\")))\n  \n  // Add some bodies\n  // Set Z coords to 1 for best visualiztion in overhead 2d Canvas\n  sim.addBody(new Body(1, 1, 1, 100))\n  sim.addBody(new Body(-1, -1, 1, 100))\n  sim.addBody(new Body(2, -2, 1, 100))\n  \n  // Start simulation  \n  sim.start()\n  \n  // Add some more\n  sim.addBody(new Body(-1, -1, 1, 100))\n}\n"],"names":[],"mappings":"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"}